Require Import basis.
-----
Require Import part1.
-----
Require Import part2.
-----
Require Import part3.
-----
Require Import affinity.
-----
Parameter Unort : Line -> Line -> Prop.
-----
Axiom O1 : forall l m : Line, ConLn l m \/ Unort l m.
-----
Axiom O2 : Separating Line (fun l m : Line => ConLn l m /\ Unort l m).
-----
Definition Ort := Negation Line Unort.
-----
Axiom\n  constructed_orthogonal :\n    forall (l : Line) (a : Point), {l' : Line | Ort l' l /\ Incident a l'}.
-----
Definition ort : Line -> Point -> Line.
-----
Definition ort : Line -> Point -> Line.

*****

*****
forall (_ : Line) (_ : Point), Line
+++++
Proof.
-----
Definition ort : Line -> Point -> Line.
Proof.

*****

*****
forall (_ : Line) (_ : Point), Line
+++++
intros l a.
-----
Definition ort : Line -> Point -> Line.
Proof.
intros l a.

*****
a : Point
l : Line
*****
Line
+++++
elim (constructed_orthogonal l a).
-----
Definition ort : Line -> Point -> Line.
Proof.
intros l a.
elim (constructed_orthogonal l a).

*****
a : Point
l : Line
*****
forall (x : Line) (_ : and (Ort x l) (Incident a x)), Line
+++++
intros x H'.
-----
Definition ort : Line -> Point -> Line.
Proof.
intros l a.
elim (constructed_orthogonal l a).
intros x H'.

*****
H' : and (Ort x l) (Incident a x)
x : Line
a : Point
l : Line
*****
Line
+++++
exact x.
-----
Definition ort : Line -> Point -> Line.
Proof.
intros l a.
elim (constructed_orthogonal l a).
intros x H'.
exact x.

*****

*****

+++++
Defined.
-----
Axiom\n  constructive_uniqueness_for_orthogonals :\n    forall (l m n : Line) (a : Point),\n    DiLn l m -> (Apart a l \/ Apart a m) \/ Unort l n \/ Unort m n.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.

*****

*****
forall (l : Line) (a : Point), Ort (ort l a) l
+++++
Proof.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.

*****

*****
forall (l : Line) (a : Point), Ort (ort l a) l
+++++
intros l a.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.
intros l a.

*****
a : Point
l : Line
*****
Ort (ort l a) l
+++++
unfold ort at 1 in |- *.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.
intros l a.
unfold ort at 1 in |- *.

*****
a : Point
l : Line
*****
Ort (sig_rec (fun _ : sig (fun l' : Line => and (Ort l' l) (Incident a l')) => Line) (fun (x : Line) (_ : and (Ort x l) (Incident a x)) => x) (constructed_orthogonal l a)) l
+++++
elim (constructed_orthogonal l a).
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).

*****
a : Point
l : Line
*****
forall (x : Line) (p : and (Ort x l) (Incident a x)), Ort (sig_rec (fun _ : sig (fun l' : Line => and (Ort l' l) (Incident a l')) => Line) (fun (x0 : Line) (_ : and (Ort x0 l) (Incident a x0)) => x0) (exist (fun l' : Line => and (Ort l' l) (Incident a l')) x p)) l
+++++
simpl in |- *.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).
simpl in |- *.

*****
a : Point
l : Line
*****
forall (x : Line) (_ : and (Ort x l) (Incident a x)), Ort x l
+++++
tauto.
-----
Theorem O3_i : forall (l : Line) (a : Point), Ort (ort l a) l.
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).
simpl in |- *.
tauto.

*****

*****

+++++
Qed.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).

*****

*****
forall (l : Line) (a : Point), Incident a (ort l a)
+++++
Proof.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.

*****

*****
forall (l : Line) (a : Point), Incident a (ort l a)
+++++
intros l a.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.
intros l a.

*****
a : Point
l : Line
*****
Incident a (ort l a)
+++++
unfold ort at 1 in |- *.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.
intros l a.
unfold ort at 1 in |- *.

*****
a : Point
l : Line
*****
Incident a (sig_rec (fun _ : sig (fun l' : Line => and (Ort l' l) (Incident a l')) => Line) (fun (x : Line) (_ : and (Ort x l) (Incident a x)) => x) (constructed_orthogonal l a))
+++++
elim (constructed_orthogonal l a).
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).

*****
a : Point
l : Line
*****
forall (x : Line) (p : and (Ort x l) (Incident a x)), Incident a (sig_rec (fun _ : sig (fun l' : Line => and (Ort l' l) (Incident a l')) => Line) (fun (x0 : Line) (_ : and (Ort x0 l) (Incident a x0)) => x0) (exist (fun l' : Line => and (Ort l' l) (Incident a l')) x p))
+++++
simpl in |- *.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).
simpl in |- *.

*****
a : Point
l : Line
*****
forall (x : Line) (_ : and (Ort x l) (Incident a x)), Incident a x
+++++
tauto.
-----
Theorem O3_ii : forall (l : Line) (a : Point), Incident a (ort l a).
Proof.
intros l a.
unfold ort at 1 in |- *.
elim (constructed_orthogonal l a).
simpl in |- *.
tauto.

*****

*****

+++++
Qed.
-----
Hint Resolve O3_i O3_ii.
-----
Theorem O4' :\n forall (l m n : Line) (a : Point),\n (Incident a l /\ Incident a m) /\ Ort l n /\ Ort m n -> EqLn l m.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (Incident a l) (Incident a m)) (and (Ort l n) (Ort m n))), EqLn l m
+++++
Proof.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (Incident a l) (Incident a m)) (and (Ort l n) (Ort m n))), EqLn l m
+++++
unfold Incident in |- *.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (not (Apart a l)) (not (Apart a m))) (and (Ort l n) (Ort m n))), EqLn l m
+++++
unfold Ort in |- *.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (not (Apart a l)) (not (Apart a m))) (and (Negation Line Unort l n) (Negation Line Unort m n))), EqLn l m
+++++
unfold EqLn in |- *.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.
unfold EqLn in |- *.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (not (Apart a l)) (not (Apart a m))) (and (Negation Line Unort l n) (Negation Line Unort m n))), Negation Line DiLn l m
+++++
unfold Negation in |- *.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.
unfold EqLn in |- *.
unfold Negation in |- *.

*****

*****
forall (l m n : Line) (a : Point) (_ : and (and (not (Apart a l)) (not (Apart a m))) (and (not (Unort l n)) (not (Unort m n)))), not (DiLn l m)
+++++
intros l m n a.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.
unfold EqLn in |- *.
unfold Negation in |- *.
intros l m n a.

*****
a : Point
l,m,n : Line
*****
forall _ : and (and (not (Apart a l)) (not (Apart a m))) (and (not (Unort l n)) (not (Unort m n))), not (DiLn l m)
+++++
generalize (constructive_uniqueness_for_orthogonals l m n a).
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.
unfold EqLn in |- *.
unfold Negation in |- *.
intros l m n a.
generalize (constructive_uniqueness_for_orthogonals l m n a).

*****
a : Point
l,m,n : Line
*****
forall (_ : forall _ : DiLn l m, or (or (Apart a l) (Apart a m)) (or (Unort l n) (Unort m n))) (_ : and (and (not (Apart a l)) (not (Apart a m))) (and (not (Unort l n)) (not (Unort m n)))), not (DiLn l m)
+++++
tauto.
-----
Theorem O4' : forall (l m n : Line) (a : Point), (Incident a l /\\ Incident a m) /\\ Ort l n /\\ Ort m n -> EqLn l m.
Proof.
unfold Incident in |- *.
unfold Ort in |- *.
unfold EqLn in |- *.
unfold Negation in |- *.
intros l m n a.
generalize (constructive_uniqueness_for_orthogonals l m n a).
tauto.

*****

*****

+++++
Qed.
-----
Theorem Uniqueness_of_orthogonality :\n forall (l m : Line) (a : Point), Incident a l /\ Ort l m -> EqLn l (ort m a).
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).

*****

*****
forall (l m : Line) (a : Point) (_ : and (Incident a l) (Ort l m)), EqLn l (ort m a)
+++++
Proof.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.

*****

*****
forall (l m : Line) (a : Point) (_ : and (Incident a l) (Ort l m)), EqLn l (ort m a)
+++++
intros l m a H'.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.

*****
H' : and (Incident a l) (Ort l m)
a : Point
l,m : Line
*****
EqLn l (ort m a)
+++++
elim H'.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.
elim H'.

*****
H' : and (Incident a l) (Ort l m)
a : Point
l,m : Line
*****
forall (_ : Incident a l) (_ : Ort l m), EqLn l (ort m a)
+++++
intros H'0 H'1.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.
elim H'.
intros H'0 H'1.

*****
H'1 : Ort l m
H'0 : Incident a l
H' : and (Incident a l) (Ort l m)
a : Point
l,m : Line
*****
EqLn l (ort m a)
+++++
clear H'.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.
elim H'.
intros H'0 H'1.
clear H'.

*****
H'1 : Ort l m
H'0 : Incident a l
a : Point
l,m : Line
*****
EqLn l (ort m a)
+++++
apply O4' with (n := m) (a := a).
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.
elim H'.
intros H'0 H'1.
clear H'.
apply O4' with (n := m) (a := a).

*****
H'1 : Ort l m
H'0 : Incident a l
a : Point
l,m : Line
*****
and (and (Incident a l) (Incident a (ort m a))) (and (Ort l m) (Ort (ort m a) m))
+++++
auto.
-----
Theorem Uniqueness_of_orthogonality : forall (l m : Line) (a : Point), Incident a l /\\ Ort l m -> EqLn l (ort m a).
Proof.
intros l m a H'.
elim H'.
intros H'0 H'1.
clear H'.
apply O4' with (n := m) (a := a).
auto.

*****

*****

+++++
Qed.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
-----
Theorem Unort_reflexive : Reflexive Line Unort.

*****

*****
Reflexive Line Unort
+++++
Proof.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.

*****

*****
Reflexive Line Unort
+++++
red in |- *.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.

*****

*****
forall x : Line, Unort x x
+++++
intro l.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.

*****
l : Line
*****
Unort l l
+++++
generalize (O1 l l).
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).

*****
l : Line
*****
forall _ : or (ConLn l l) (Unort l l), Unort l l
+++++
intro H'.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.

*****
H' : or (ConLn l l) (Unort l l)
l : Line
*****
Unort l l
+++++
elim H'.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.

*****
H' : or (ConLn l l) (Unort l l)
l : Line
*****
forall _ : ConLn l l, Unort l l
+++++
intro H'0.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.
intro H'0.

*****
H'0 : ConLn l l
H' : or (ConLn l l) (Unort l l)
l : Line
*****
Unort l l
+++++
clear H'.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.
intro H'0.
clear H'.

*****
H'0 : ConLn l l
l : Line
*****
Unort l l
+++++
elim apart_con.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.
intro H'0.
clear H'.
elim apart_con.

*****
H'0 : ConLn l l
l : Line
*****
forall (_ : Irreflexive Line ConLn) (_ : Separating Line ConLn), Unort l l
+++++
intro H'.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.
intro H'0.
clear H'.
elim apart_con.
intro H'.

*****
H' : Irreflexive Line ConLn
H'0 : ConLn l l
l : Line
*****
forall _ : Separating Line ConLn, Unort l l
+++++
elim (H' l).
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.
intro H'0.
clear H'.
elim apart_con.
intro H'.
elim (H' l).

*****
H' : Irreflexive Line ConLn
H'0 : ConLn l l
l : Line
*****
ConLn l l
+++++
auto.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.

*****
H' : or (ConLn l l) (Unort l l)
l : Line
*****
forall _ : Unort l l, Unort l l
+++++
trivial.
-----
Theorem Unort_reflexive : Reflexive Line Unort.
Proof.
red in |- *.
intro l.
generalize (O1 l l).
intro H'.
elim H'.

*****

*****

+++++
Qed.
-----
Theorem cmp_unort_con :\n forall l m n : Line, Unort l m -> ConLn l n \/ Unort m n.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.

*****

*****
forall (l m n : Line) (_ : Unort l m), or (ConLn l n) (Unort m n)
+++++
Proof.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.

*****

*****
forall (l m n : Line) (_ : Unort l m), or (ConLn l n) (Unort m n)
+++++
intros l m n H'.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.

*****
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
generalize (O1 m n).
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).

*****
H' : Unort l m
l,m,n : Line
*****
forall _ : or (ConLn m n) (Unort m n), or (ConLn l n) (Unort m n)
+++++
intro H'1.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.

*****
H'1 : or (ConLn m n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
elim H'1.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.

*****
H'1 : or (ConLn m n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
forall _ : ConLn m n, or (ConLn l n) (Unort m n)
+++++
intro H'0.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.

*****
H'0 : ConLn m n
H'1 : or (ConLn m n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
clear H'1.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.

*****
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
elim apart_con.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.

*****
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall (_ : Irreflexive Line ConLn) (_ : Separating Line ConLn), or (ConLn l n) (Unort m n)
+++++
intros H'1 H'2.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.

*****
H'2 : Separating Line ConLn
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
red in H'2.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.

*****
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
lapply (H'2 m n l).
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).

*****
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall _ : or (ConLn m l) (ConLn n l), or (ConLn l n) (Unort m n)
+++++
intro H'6.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.

*****
H'6 : or (ConLn m l) (ConLn n l)
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
elim H'6.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.

*****
H'6 : or (ConLn m l) (ConLn n l)
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall _ : ConLn m l, or (ConLn l n) (Unort m n)
+++++
intro H'3.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.

*****
H'3 : ConLn m l
H'6 : or (ConLn m l) (ConLn n l)
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
clear H'6.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.

*****
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
generalize O2.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.
generalize O2.

*****
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall _ : Separating Line (fun l m : Line => and (ConLn l m) (Unort l m)), or (ConLn l n) (Unort m n)
+++++
intro H'4.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.
generalize O2.
intro H'4.

*****
H'4 : Separating Line (fun l m : Line => and (ConLn l m) (Unort l m))
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
red in H'4.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.
generalize O2.
intro H'4.
red in H'4.

*****
H'4 : forall (x y z : Line) (_ : and (ConLn x y) (Unort x y)),\nor (and (ConLn x z) (Unort x z)) (and (ConLn y z) (Unort y z))
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
or (ConLn l n) (Unort m n)
+++++
lapply (H'4 l m n).
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.
generalize O2.
intro H'4.
red in H'4.
lapply (H'4 l m n).

*****
H'4 : forall (x y z : Line) (_ : and (ConLn x y) (Unort x y)),\nor (and (ConLn x z) (Unort x z)) (and (ConLn y z) (Unort y z))
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall _ : or (and (ConLn l n) (Unort l n)) (and (ConLn m n) (Unort m n)), or (ConLn l n) (Unort m n)
+++++
intuition.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.
intro H'3.
clear H'6.
generalize O2.
intro H'4.
red in H'4.
lapply (H'4 l m n).

*****
H'4 : forall (x y z : Line) (_ : and (ConLn x y) (Unort x y)),\nor (and (ConLn x z) (Unort x z)) (and (ConLn y z) (Unort y z))
H'3 : ConLn m l
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
and (ConLn l m) (Unort l m)
+++++
intuition.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).
intro H'6.
elim H'6.

*****
H'6 : or (ConLn m l) (ConLn n l)
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
forall _ : ConLn n l, or (ConLn l n) (Unort m n)
+++++
auto.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.
intro H'0.
clear H'1.
elim apart_con.
intros H'1 H'2.
red in H'2.
lapply (H'2 m n l).

*****
H'2 : forall (x y z : Line) (_ : ConLn x y), or (ConLn x z) (ConLn y z)
H'1 : Irreflexive Line ConLn
H'0 : ConLn m n
H' : Unort l m
l,m,n : Line
*****
ConLn m n
+++++
assumption.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.

*****
H'1 : or (ConLn m n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
forall _ : Unort m n, or (ConLn l n) (Unort m n)
+++++
auto.
-----
Theorem cmp_unort_con : forall l m n : Line, Unort l m -> ConLn l n \\/ Unort m n.
Proof.
intros l m n H'.
generalize (O1 m n).
intro H'1.
elim H'1.

*****

*****

+++++
Qed.
-----
Theorem cmp_unort_diln :\n forall l m n : Line, Unort l m -> DiLn l n \/ Unort m n.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.

*****

*****
forall (l m n : Line) (_ : Unort l m), or (DiLn l n) (Unort m n)
+++++
Proof.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.

*****

*****
forall (l m n : Line) (_ : Unort l m), or (DiLn l n) (Unort m n)
+++++
intros l m n H'.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.

*****
H' : Unort l m
l,m,n : Line
*****
or (DiLn l n) (Unort m n)
+++++
lapply (cmp_unort_con l m n).
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (cmp_unort_con l m n).

*****
H' : Unort l m
l,m,n : Line
*****
forall _ : or (ConLn l n) (Unort m n), or (DiLn l n) (Unort m n)
+++++
intro H'3.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (cmp_unort_con l m n).
intro H'3.

*****
H'3 : or (ConLn l n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
or (DiLn l n) (Unort m n)
+++++
auto.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (cmp_unort_con l m n).
intro H'3.
auto.

*****
H'3 : or (ConLn l n) (Unort m n)
H' : Unort l m
l,m,n : Line
*****
or (DiLn l n) (Unort m n)
+++++
intuition.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (cmp_unort_con l m n).

*****
H' : Unort l m
l,m,n : Line
*****
Unort l m
+++++
assumption.
-----
Theorem cmp_unort_diln : forall l m n : Line, Unort l m -> DiLn l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (cmp_unort_con l m n).

*****

*****

+++++
Qed.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
-----
Theorem Unort_symmetric : Symmetric Line Unort.

*****

*****
Symmetric Line Unort
+++++
Proof.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.

*****

*****
Symmetric Line Unort
+++++
unfold Symmetric at 1 in |- *.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.

*****

*****
forall (x y : Line) (_ : Unort x y), Unort y x
+++++
intros l m H'.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.

*****
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
lapply (cmp_unort_con l m l).
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).

*****
H' : Unort l m
l,m : Line
*****
forall _ : or (ConLn l l) (Unort m l), Unort m l
+++++
intro H'3.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.

*****
H'3 : or (ConLn l l) (Unort m l)
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
elim H'3.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.

*****
H'3 : or (ConLn l l) (Unort m l)
H' : Unort l m
l,m : Line
*****
forall _ : ConLn l l, Unort m l
+++++
intro H'4.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.

*****
H'4 : ConLn l l
H'3 : or (ConLn l l) (Unort m l)
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
clear H'3.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
cut (Irreflexive Line ConLn).
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
forall _ : Irreflexive Line ConLn, Unort m l
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
forall _ : Irreflexive Line ConLn, Unort m l
+++++
intro H'0.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.
intro H'0.

*****
H'0 : Irreflexive Line ConLn
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
red in H'0.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.
intro H'0.
red in H'0.

*****
H'0 : forall x : Line, not (ConLn x x)
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Unort m l
+++++
elim (H'0 l).
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.
intro H'0.
red in H'0.
elim (H'0 l).

*****
H'0 : forall x : Line, not (ConLn x x)
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
ConLn l l
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Irreflexive Line ConLn
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
Irreflexive Line ConLn
+++++
elim apart_con.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.
intro H'4.
clear H'3.
auto.
cut (Irreflexive Line ConLn).
auto.
elim apart_con.

*****
H'4 : ConLn l l
H' : Unort l m
l,m : Line
*****
forall (_ : Irreflexive Line ConLn) (_ : Separating Line ConLn), Irreflexive Line ConLn
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
intro H'3.
elim H'3.

*****
H'3 : or (ConLn l l) (Unort m l)
H' : Unort l m
l,m : Line
*****
forall _ : Unort m l, Unort m l
+++++
trivial.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).

*****
H' : Unort l m
l,m : Line
*****
Unort l m
+++++
idtac.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).
idtac.

*****
H' : Unort l m
l,m : Line
*****
Unort l m
+++++
auto.
-----
Theorem Unort_symmetric : Symmetric Line Unort.
Proof.
unfold Symmetric at 1 in |- *.
intros l m H'.
lapply (cmp_unort_con l m l).

*****

*****

+++++
Qed.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \/ Unort m n.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.

*****

*****
forall (l m n : Line) (_ : ConLn l m), or (Unort l n) (Unort m n)
+++++
Proof.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.

*****

*****
forall (l m n : Line) (_ : ConLn l m), or (Unort l n) (Unort m n)
+++++
intros l m n H'.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.

*****
H' : ConLn l m
l,m,n : Line
*****
or (Unort l n) (Unort m n)
+++++
lapply (Convergent_imp_distinct l m).
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).

*****
H' : ConLn l m
l,m,n : Line
*****
forall _ : DiLn l m, or (Unort l n) (Unort m n)
+++++
intro H'2.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.

*****
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
or (Unort l n) (Unort m n)
+++++
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).

*****
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall _ : or (or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l) (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)) (or (Unort l n) (Unort m n)), or (Unort l n) (Unort m n)
+++++
intro H'5.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.

*****
H'5 : or\n (or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m))\n (or (Unort l n) (Unort m n))
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
or (Unort l n) (Unort m n)
+++++
elim H'5.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.

*****
H'5 : or\n (or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m))\n (or (Unort l n) (Unort m n))
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall _ : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l) (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m), or (Unort l n) (Unort m n)
+++++
intro H'0.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'5 : or\n (or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m))\n (or (Unort l n) (Unort m n))
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
or (Unort l n) (Unort m n)
+++++
clear H'5.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
or (Unort l n) (Unort m n)
+++++
generalize (inc_pt1 (Twol l m H')).
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.
generalize (inc_pt1 (Twol l m H')).

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall _ : Incident (pt {| line1 := l; line2 := m; Twol_cond := H' |}) (line1 {| line1 := l; line2 := m; Twol_cond := H' |}), or (Unort l n) (Unort m n)
+++++
generalize (inc_pt2 (Twol l m H')).
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.
generalize (inc_pt1 (Twol l m H')).
generalize (inc_pt2 (Twol l m H')).

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall (_ : Incident (pt {| line1 := l; line2 := m; Twol_cond := H' |}) (line2 {| line1 := l; line2 := m; Twol_cond := H' |})) (_ : Incident (pt {| line1 := l; line2 := m; Twol_cond := H' |}) (line1 {| line1 := l; line2 := m; Twol_cond := H' |})), or (Unort l n) (Unort m n)
+++++
simpl in |- *.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.
generalize (inc_pt1 (Twol l m H')).
generalize (inc_pt2 (Twol l m H')).
simpl in |- *.

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall (_ : Incident (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m) (_ : Incident (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l), or (Unort l n) (Unort m n)
+++++
unfold Incident in |- *.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.
generalize (inc_pt1 (Twol l m H')).
generalize (inc_pt2 (Twol l m H')).
simpl in |- *.
unfold Incident in |- *.

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall (_ : not (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)) (_ : not (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)), or (Unort l n) (Unort m n)
+++++
unfold Negation in |- *.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.
intro H'0.
clear H'5.
generalize (inc_pt1 (Twol l m H')).
generalize (inc_pt2 (Twol l m H')).
simpl in |- *.
unfold Incident in |- *.
unfold Negation in |- *.

*****
H'0 : or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall (_ : not (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m)) (_ : not (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)), or (Unort l n) (Unort m n)
+++++
tauto.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).
intro H'5.
elim H'5.

*****
H'5 : or\n (or (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) l)\n (Apart (pt {| line1 := l; line2 := m; Twol_cond := H' |}) m))\n (or (Unort l n) (Unort m n))
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
forall _ : or (Unort l n) (Unort m n), or (Unort l n) (Unort m n)
+++++
trivial.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).
intro H'2.
lapply (constructive_uniqueness_for_orthogonals l m n (pt (Twol l m H'))).

*****
H'2 : DiLn l m
H' : ConLn l m
l,m,n : Line
*****
DiLn l m
+++++
assumption.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).

*****
H' : ConLn l m
l,m,n : Line
*****
ConLn l m
+++++
assumption.
-----
Theorem thm8_6 : forall l m n : Line, ConLn l m -> Unort l n \\/ Unort m n.
Proof.
intros l m n H'.
lapply (Convergent_imp_distinct l m).

*****

*****

+++++
Qed.
-----
Definition Oblique : Relation Line :=\n  fun l m : Line => ConLn l m /\ Unort l m.
-----
Theorem apart_obl : Apartness Line Oblique.
-----
Theorem apart_obl : Apartness Line Oblique.

*****

*****
Apartness Line Oblique
+++++
Proof.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.

*****

*****
Apartness Line Oblique
+++++
apply Definition_of_apartness.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.

*****

*****
Irreflexive Line Oblique
+++++
unfold Irreflexive in |- *.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.

*****

*****
forall x : Line, not (Oblique x x)
+++++
unfold Negation in |- *.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.

*****

*****
forall x : Line, not (Oblique x x)
+++++
unfold Oblique in |- *.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.

*****

*****
forall x : Line, not (and (ConLn x x) (Unort x x))
+++++
intro l.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.

*****
l : Line
*****
not (and (ConLn l l) (Unort l l))
+++++
red in |- *.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.

*****
l : Line
*****
forall _ : and (ConLn l l) (Unort l l), False
+++++
intro H'.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.

*****
H' : and (ConLn l l) (Unort l l)
l : Line
*****
False
+++++
elim H'.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.

*****
H' : and (ConLn l l) (Unort l l)
l : Line
*****
forall (_ : ConLn l l) (_ : Unort l l), False
+++++
intros H'0 H'1.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.
intros H'0 H'1.

*****
H'1 : Unort l l
H'0 : ConLn l l
H' : and (ConLn l l) (Unort l l)
l : Line
*****
False
+++++
clear H'.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.
intros H'0 H'1.
clear H'.

*****
H'1 : Unort l l
H'0 : ConLn l l
l : Line
*****
False
+++++
elim apart_con.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.
intros H'0 H'1.
clear H'.
elim apart_con.

*****
H'1 : Unort l l
H'0 : ConLn l l
l : Line
*****
forall (_ : Irreflexive Line ConLn) (_ : Separating Line ConLn), False
+++++
intros H' H'2.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.
intros H'0 H'1.
clear H'.
elim apart_con.
intros H' H'2.

*****
H'2 : Separating Line ConLn
H' : Irreflexive Line ConLn
H'1 : Unort l l
H'0 : ConLn l l
l : Line
*****
False
+++++
apply (H' l).
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Irreflexive in |- *.
unfold Negation in |- *.
unfold Oblique in |- *.
intro l.
red in |- *.
intro H'.
elim H'.
intros H'0 H'1.
clear H'.
elim apart_con.
intros H' H'2.
apply (H' l).

*****
H'2 : Separating Line ConLn
H' : Irreflexive Line ConLn
H'1 : Unort l l
H'0 : ConLn l l
l : Line
*****
ConLn l l
+++++
assumption.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.

*****

*****
Separating Line Oblique
+++++
unfold Oblique in |- *.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.
unfold Oblique in |- *.

*****

*****
Separating Line (fun l m : Line => and (ConLn l m) (Unort l m))
+++++
exact O2.
-----
Theorem apart_obl : Apartness Line Oblique.
Proof.
apply Definition_of_apartness.

*****

*****

+++++
Qed.
-----
Theorem ort_ort_like_par_i :\n forall (l : Line) (a : Point), Incident a (ort (ort l a) a).
-----
Theorem ort_ort_like_par_i : forall (l : Line) (a : Point), Incident a (ort (ort l a) a).

*****

*****
forall (l : Line) (a : Point), Incident a (ort (ort l a) a)
+++++
Proof.
-----
Theorem ort_ort_like_par_i : forall (l : Line) (a : Point), Incident a (ort (ort l a) a).
Proof.

*****

*****
forall (l : Line) (a : Point), Incident a (ort (ort l a) a)
+++++
auto.
-----
Theorem ort_ort_like_par_i : forall (l : Line) (a : Point), Incident a (ort (ort l a) a).
Proof.
auto.

*****

*****

+++++
Qed.
-----
Theorem thm8_8 :\n forall (l : Line) (a b : Point),\n Incident b (ort l a) -> EqLn (ort l a) (ort l b).
-----
Theorem thm8_8 : forall (l : Line) (a b : Point), Incident b (ort l a) -> EqLn (ort l a) (ort l b).

*****

*****
forall (l : Line) (a b : Point) (_ : Incident b (ort l a)), EqLn (ort l a) (ort l b)
+++++
Proof.
-----
Theorem thm8_8 : forall (l : Line) (a b : Point), Incident b (ort l a) -> EqLn (ort l a) (ort l b).
Proof.

*****

*****
forall (l : Line) (a b : Point) (_ : Incident b (ort l a)), EqLn (ort l a) (ort l b)
+++++
intros l a b H'.
-----
Theorem thm8_8 : forall (l : Line) (a b : Point), Incident b (ort l a) -> EqLn (ort l a) (ort l b).
Proof.
intros l a b H'.

*****
H' : Incident b (ort l a)
a,b : Point
l : Line
*****
EqLn (ort l a) (ort l b)
+++++
apply O4' with (n := l) (a := b).
-----
Theorem thm8_8 : forall (l : Line) (a b : Point), Incident b (ort l a) -> EqLn (ort l a) (ort l b).
Proof.
intros l a b H'.
apply O4' with (n := l) (a := b).

*****
H' : Incident b (ort l a)
a,b : Point
l : Line
*****
and (and (Incident b (ort l a)) (Incident b (ort l b))) (and (Ort (ort l a) l) (Ort (ort l b) l))
+++++
auto.
-----
Theorem thm8_8 : forall (l : Line) (a b : Point), Incident b (ort l a) -> EqLn (ort l a) (ort l b).
Proof.
intros l a b H'.
apply O4' with (n := l) (a := b).
auto.

*****

*****

+++++
Qed.
-----
Section delicate.
-----
Variable a : Point.
-----
Variable l : Line.
-----
Variable H : ConLn l (ort (ort l a) a).
-----
Let t : Twolines := Twol l (ort (ort l a) a) H.
-----
Let b : Point := pt t.
-----
Theorem thm8_9_aux : False.
-----
Theorem thm8_9_aux : False.

*****
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
Proof.
-----
Theorem thm8_9_aux : False.
Proof.

*****
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
generalize (inc_pt1 t).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).

*****
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Incident (pt t) (line1 t), False
+++++
intro H'0.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.

*****
H'0 : Incident (pt t) (line1 t)
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
simpl in H'0.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.

*****
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
generalize (inc_pt2 t).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).

*****
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Incident (pt t) (line2 t), False
+++++
intro H'1.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.

*****
H'1 : Incident (pt t) (line2 t)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
simpl in H'1.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.

*****
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).

*****
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : DiLn l (ort (ort l a) a), False
+++++
intro H'4.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.

*****
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
lapply (thm8_8 (ort l a) a b).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).

*****
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b), False
+++++
intro H'6.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.

*****
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).

*****
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b), DiLn l (ort (ort l a) b), False
+++++
intro H'7.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.

*****
H'7 : forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b),\nDiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
lapply H'7.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.

*****
H'7 : forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b),\nDiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : DiLn l (ort (ort l a) b), False
+++++
intro H'8.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.

*****
H'8 : DiLn l (ort (ort l a) b)
H'7 : forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b),\nDiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'7.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.

*****
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.

*****
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).

*****
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : or (or (Apart b l) (Apart b (ort (ort l a) b))) (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))), False
+++++
intro H'9.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.

*****
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim H'9.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.

*****
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : or (Apart b l) (Apart b (ort (ort l a) b)), False
+++++
intro H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.

*****
H'2 : or (Apart b l) (Apart b (ort (ort l a) b))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.

*****
H'2 : or (Apart b l) (Apart b (ort (ort l a) b))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Apart b l, False
+++++
intro H'3.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.

*****
H'3 : Apart b l
H'2 : or (Apart b l) (Apart b (ort (ort l a) b))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'2 H'9.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.
clear H'2 H'9.

*****
H'3 : Apart b l
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
unfold b at 1 in H'3.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.
clear H'2 H'9.
unfold b at 1 in H'3.

*****
H'3 : Apart (pt t) l
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim H'0.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.
clear H'2 H'9.
unfold b at 1 in H'3.
elim H'0.

*****
H'3 : Apart (pt t) l
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
Apart (pt t) l
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.

*****
H'2 : or (Apart b l) (Apart b (ort (ort l a) b))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Apart b (ort (ort l a) b), False
+++++
intro H'3.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.

*****
H'3 : Apart b (ort (ort l a) b)
H'2 : or (Apart b l) (Apart b (ort (ort l a) b))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'2 H'9.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.
clear H'2 H'9.

*****
H'3 : Apart b (ort (ort l a) b)
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim (O3_ii (ort l a) b).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
elim H'2.
intro H'3.
clear H'2 H'9.
elim (O3_ii (ort l a) b).

*****
H'3 : Apart b (ort (ort l a) b)
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
Apart b (ort (ort l a) b)
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.

*****
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)), False
+++++
intro H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.

*****
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'9 : or (or (Apart b l) (Apart b (ort (ort l a) b)))\n (or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a)))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'9.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.

*****
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
generalize Unort_symmetric.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.

*****
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Symmetric Line Unort, False
+++++
intro H'.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.

*****
H' : Symmetric Line Unort
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
red in H'.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.

*****
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.

*****
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Unort l (ort l a), False
+++++
intro H'3.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.

*****
H'3 : Unort l (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.
clear H'2.

*****
H'3 : Unort l (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim (O3_i l a).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.
clear H'2.
elim (O3_i l a).

*****
H'3 : Unort l (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
Unort (ort l a) l
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.

*****
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
forall _ : Unort (ort (ort l a) b) (ort l a), False
+++++
intro H'3.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.

*****
H'3 : Unort (ort (ort l a) b) (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'2 : or (Unort l (ort l a)) (Unort (ort (ort l a) b) (ort l a))
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
clear H'2.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.
clear H'2.

*****
H'3 : Unort (ort (ort l a) b) (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
False
+++++
elim (O3_i (ort l a) b).
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).
intro H'9.
elim H'9.
intro H'2.
clear H'9.
generalize Unort_symmetric.
intro H'.
red in H'.
elim H'2.
intro H'3.
clear H'2.
elim (O3_i (ort l a) b).

*****
H'3 : Unort (ort (ort l a) b) (ort l a)
H' : forall (x y : Line) (_ : Unort x y), Unort y x
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
Unort (ort (ort l a) b) (ort l a)
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
intro H'8.
clear H'7.
auto.
lapply (constructive_uniqueness_for_orthogonals l (ort (ort l a) b) (ort l a) b).

*****
H'8 : DiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
DiLn l (ort (ort l a) b)
+++++
assumption.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.

*****
H'7 : forall _ : EqLn (ort (ort l a) a) (ort (ort l a) b),\nDiLn l (ort (ort l a) b)
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
EqLn (ort (ort l a) a) (ort (ort l a) b)
+++++
clear H'7.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
intro H'7.
lapply H'7.
clear H'7.

*****
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
EqLn (ort (ort l a) a) (ort (ort l a) b)
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).

*****
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
DiLn l (ort (ort l a) a)
+++++
idtac.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).
intro H'6.
lapply (cong_eqln_diln l (ort (ort l a) a) (ort (ort l a) b)).
idtac.

*****
H'6 : EqLn (ort (ort l a) a) (ort (ort l a) b)
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
DiLn l (ort (ort l a) a)
+++++
auto.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).
intro H'4.
lapply (thm8_8 (ort l a) a b).

*****
H'4 : DiLn l (ort (ort l a) a)
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
Incident b (ort (ort l a) a)
+++++
assumption.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).

*****
H'1 : Incident (pt t) (ort (ort l a) a)
H'0 : Incident (pt t) l
b : Point
t : Twolines
H : ConLn l (ort (ort l a) a)
l : Line
a : Point
*****
ConLn l (ort (ort l a) a)
+++++
assumption.
-----
Theorem thm8_9_aux : False.
Proof.
generalize (inc_pt1 t).
intro H'0.
simpl in H'0.
generalize (inc_pt2 t).
intro H'1.
simpl in H'1.
lapply (Convergent_imp_distinct l (ort (ort l a) a)).

*****

*****

+++++
Qed.
-----
End delicate.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).

*****

*****
forall (l : Line) (a : Point), Par l (ort (ort l a) a)
+++++
Proof.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.

*****

*****
forall (l : Line) (a : Point), Par l (ort (ort l a) a)
+++++
intros l a.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.

*****
a : Point
l : Line
*****
Par l (ort (ort l a) a)
+++++
unfold Par in |- *.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.

*****
a : Point
l : Line
*****
Negation Line ConLn l (ort (ort l a) a)
+++++
unfold Negation in |- *.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.
unfold Negation in |- *.

*****
a : Point
l : Line
*****
not (ConLn l (ort (ort l a) a))
+++++
red in |- *.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.
unfold Negation in |- *.
red in |- *.

*****
a : Point
l : Line
*****
forall _ : ConLn l (ort (ort l a) a), False
+++++
intro H'.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.
unfold Negation in |- *.
red in |- *.
intro H'.

*****
H' : ConLn l (ort (ort l a) a)
a : Point
l : Line
*****
False
+++++
apply (thm8_9_aux a l).
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.
unfold Negation in |- *.
red in |- *.
intro H'.
apply (thm8_9_aux a l).

*****
H' : ConLn l (ort (ort l a) a)
a : Point
l : Line
*****
ConLn l (ort (ort l a) a)
+++++
trivial.
-----
Theorem thm8_9 : forall (l : Line) (a : Point), Par l (ort (ort l a) a).
Proof.
intros l a.
unfold Par in |- *.
unfold Negation in |- *.
red in |- *.
intro H'.
apply (thm8_9_aux a l).
trivial.

*****

*****

+++++
Qed.
-----
Hint Resolve thm8_9.
-----
Theorem thm8_10 :\n forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).
-----
Theorem thm8_10 : forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).

*****

*****
forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a)
+++++
Proof.
-----
Theorem thm8_10 : forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).
Proof.

*****

*****
forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a)
+++++
intros l a.
-----
Theorem thm8_10 : forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).
Proof.
intros l a.

*****
a : Point
l : Line
*****
EqLn (par l a) (ort (ort l a) a)
+++++
apply sym_EqLn.
-----
Theorem thm8_10 : forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).
Proof.
intros l a.
apply sym_EqLn.

*****
a : Point
l : Line
*****
EqLn (ort (ort l a) a) (par l a)
+++++
auto.
-----
Theorem thm8_10 : forall (l : Line) (a : Point), EqLn (par l a) (ort (ort l a) a).
Proof.
intros l a.
apply sym_EqLn.
auto.

*****

*****

+++++
Qed.
-----
