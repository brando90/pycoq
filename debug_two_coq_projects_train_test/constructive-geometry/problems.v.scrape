Require Import basis.
-----
Require Import part1.
-----
Require Import part2.
-----
Require Import part3.
-----
Require Import affinity.
-----
Require Import orthogonality.
-----
Theorem pb9_1 :\n forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).

*****

*****
forall (_ : Point) (l : Line), ex (fun b : Point => Incident b l)
+++++
Proof.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.

*****

*****
forall (_ : Point) (l : Line), ex (fun b : Point => Incident b l)
+++++
intros a l.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.

*****
l : Line
a : Point
*****
ex (fun b : Point => Incident b l)
+++++
generalize (O3_i l a).
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).

*****
l : Line
a : Point
*****
forall _ : Ort (ort l a) l, ex (fun b : Point => Incident b l)
+++++
intro H'.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.

*****
H' : Ort (ort l a) l
l : Line
a : Point
*****
ex (fun b : Point => Incident b l)
+++++
elim (O1 (ort l a) l).
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).

*****
H' : Ort (ort l a) l
l : Line
a : Point
*****
forall _ : ConLn (ort l a) l, ex (fun b : Point => Incident b l)
+++++
intro H'2.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).
intro H'2.

*****
H'2 : ConLn (ort l a) l
H' : Ort (ort l a) l
l : Line
a : Point
*****
ex (fun b : Point => Incident b l)
+++++
exists (pt (Twol (ort l a) l H'2)).
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).
intro H'2.
exists (pt (Twol (ort l a) l H'2)).

*****
H'2 : ConLn (ort l a) l
H' : Ort (ort l a) l
l : Line
a : Point
*****
Incident (pt {| line1 := ort l a; line2 := l; Twol_cond := H'2 |}) l
+++++
exact (inc_pt2 (Twol (ort l a) l H'2)).
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).

*****
H' : Ort (ort l a) l
l : Line
a : Point
*****
forall _ : Unort (ort l a) l, ex (fun b : Point => Incident b l)
+++++
intro H'2.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).
intro H'2.

*****
H'2 : Unort (ort l a) l
H' : Ort (ort l a) l
l : Line
a : Point
*****
ex (fun b : Point => Incident b l)
+++++
elim H'.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).
intro H'2.
elim H'.

*****
H'2 : Unort (ort l a) l
H' : Ort (ort l a) l
l : Line
a : Point
*****
Unort (ort l a) l
+++++
auto.
-----
Theorem pb9_1 : forall (a : Point) (l : Line), ex (fun b : Point => Incident b l).
Proof.
intros a l.
generalize (O3_i l a).
intro H'.
elim (O1 (ort l a) l).

*****

*****

+++++
Qed.
-----
Section construction9_2.
-----
Variable t : Triangle.
-----
Let C : Point := summit t.
-----
Let A : Point := origin (base t).
-----
Let B : Point := extremity (base t).
-----
Let Base : Line := ln (base t).
-----
Let L1 : Line := ln (Side1 t).
-----
Let L2 : Line := ln (Side2 t).
-----
Let L3 : Line := par Base C.
-----
Let L4 : Line := par L1 B.
-----
Let lemma1 : ConLn Base L1.
-----
Let lemma1 : ConLn Base L1.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn Base L1
+++++
Proof.
-----
Let lemma1 : ConLn Base L1.
Proof.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn Base L1
+++++
unfold Base in |- *.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn (ln (base t)) L1
+++++
unfold L1 in |- *.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn (ln (base t)) (ln (Side1 t))
+++++
apply DiLn_qimp_con.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn (ln (base t)) (ln (Side1 t))
+++++
auto.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ex (fun b : Point => and (Incident b (ln (base t))) (Incident b (ln (Side1 t))))
+++++
auto.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ex (fun b : Point => and (Incident b (ln (base t))) (Incident b (ln (Side1 t))))
+++++
exists (origin (base t)).
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.
exists (origin (base t)).

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (Incident (origin (base t)) (ln (base t))) (Incident (origin (base t)) (ln (Side1 t)))
+++++
split.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.
exists (origin (base t)).
split.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin (base t)) (ln (base t))
+++++
auto.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.
exists (origin (base t)).
split.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin (base t)) (ln (Side1 t))
+++++
auto.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.
exists (origin (base t)).
split.
auto.

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin (base t)) (ln (Side1 t))
+++++
rewrite (auxs1 t).
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.
auto.
exists (origin (base t)).
split.
auto.
rewrite (auxs1 t).

*****
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity (Side1 t)) (ln (Side1 t))
+++++
auto.
-----
Let lemma1 : ConLn Base L1.
Proof.
unfold Base in |- *.
unfold L1 in |- *.
apply DiLn_qimp_con.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma1.
-----
Let lemma2 : DiLn Base L3.
-----
Let lemma2 : DiLn Base L3.

*****
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn Base L3
+++++
Proof.
-----
Let lemma2 : DiLn Base L3.
Proof.

*****
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn Base L3
+++++
unfold L3 in |- *.
-----
Let lemma2 : DiLn Base L3.
Proof.
unfold L3 in |- *.

*****
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn Base (par Base C)
+++++
unfold Base in |- *.
-----
Let lemma2 : DiLn Base L3.
Proof.
unfold L3 in |- *.
unfold Base in |- *.

*****
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn (ln (base t)) (par (ln (base t)) C)
+++++
unfold C in |- *.
-----
Let lemma2 : DiLn Base L3.
Proof.
unfold L3 in |- *.
unfold Base in |- *.
unfold C in |- *.

*****
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn (ln (base t)) (par (ln (base t)) (summit t))
+++++
auto.
-----
Let lemma2 : DiLn Base L3.
Proof.
unfold L3 in |- *.
unfold Base in |- *.
unfold C in |- *.
auto.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma2.
-----
Let lemma5' : Apart B L1.
-----
Let lemma5' : Apart B L1.

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L1
+++++
Proof.
-----
Let lemma5' : Apart B L1.
Proof.

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L1
+++++
unfold B in |- *.
-----
Let lemma5' : Apart B L1.
Proof.
unfold B in |- *.

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart (extremity (base t)) L1
+++++
unfold L1 in |- *.
-----
Let lemma5' : Apart B L1.
Proof.
unfold B in |- *.
unfold L1 in |- *.

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart (extremity (base t)) (ln (Side1 t))
+++++
apply cong_eqln_apt with (l := ln (reverse (Side1 t))).
-----
Let lemma5' : Apart B L1.
Proof.
unfold B in |- *.
unfold L1 in |- *.
apply cong_eqln_apt with (l := ln (reverse (Side1 t))).

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart (extremity (base t)) (ln (reverse (Side1 t)))
+++++
auto.
-----
Let lemma5' : Apart B L1.
Proof.
unfold B in |- *.
unfold L1 in |- *.
apply cong_eqln_apt with (l := ln (reverse (Side1 t))).

*****
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn (ln (reverse (Side1 t))) (ln (Side1 t))
+++++
auto.
-----
Let lemma5' : Apart B L1.
Proof.
unfold B in |- *.
unfold L1 in |- *.
apply cong_eqln_apt with (l := ln (reverse (Side1 t))).

*****

*****

+++++
Qed.
-----
Hint Resolve lemma5'.
-----
Let lemma2' : DiLn L1 L4.
-----
Let lemma2' : DiLn L1 L4.

*****
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn L1 L4
+++++
Proof.
-----
Let lemma2' : DiLn L1 L4.
Proof.

*****
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn L1 L4
+++++
unfold L1 in |- *.
-----
Let lemma2' : DiLn L1 L4.
Proof.
unfold L1 in |- *.

*****
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn (ln (Side1 t)) L4
+++++
unfold L4 in |- *.
-----
Let lemma2' : DiLn L1 L4.
Proof.
unfold L1 in |- *.
unfold L4 in |- *.

*****
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn (ln (Side1 t)) (par L1 B)
+++++
auto.
-----
Let lemma2' : DiLn L1 L4.
Proof.
unfold L1 in |- *.
unfold L4 in |- *.
auto.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma2'.
-----
Let lemma3 : ConLn L1 L3.
-----
Let lemma3 : ConLn L1 L3.

*****
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L1 L3
+++++
Proof.
-----
Let lemma3 : ConLn L1 L3.
Proof.

*****
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L1 L3
+++++
unfold L3 at 1 in |- *.
-----
Let lemma3 : ConLn L1 L3.
Proof.
unfold L3 at 1 in |- *.

*****
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L1 (par Base C)
+++++
apply cong_par_con with (m := Base).
-----
Let lemma3 : ConLn L1 L3.
Proof.
unfold L3 at 1 in |- *.
apply cong_par_con with (m := Base).

*****
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L1 Base
+++++
auto.
-----
Let lemma3 : ConLn L1 L3.
Proof.
unfold L3 at 1 in |- *.
apply cong_par_con with (m := Base).

*****
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Par Base (par Base C)
+++++
auto.
-----
Let lemma3 : ConLn L1 L3.
Proof.
unfold L3 at 1 in |- *.
apply cong_par_con with (m := Base).

*****

*****

+++++
Qed.
-----
Hint Resolve lemma3.
-----
Let lemma4 : ConLn L3 L4.
-----
Let lemma4 : ConLn L3 L4.

*****
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L3 L4
+++++
Proof.
-----
Let lemma4 : ConLn L3 L4.
Proof.

*****
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L3 L4
+++++
unfold L4 at 1 in |- *.
-----
Let lemma4 : ConLn L3 L4.
Proof.
unfold L4 at 1 in |- *.

*****
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L3 (par L1 B)
+++++
apply cong_par_con with (m := L1).
-----
Let lemma4 : ConLn L3 L4.
Proof.
unfold L4 at 1 in |- *.
apply cong_par_con with (m := L1).

*****
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn L3 L1
+++++
auto.
-----
Let lemma4 : ConLn L3 L4.
Proof.
unfold L4 at 1 in |- *.
apply cong_par_con with (m := L1).

*****
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Par L1 (par L1 B)
+++++
auto.
-----
Let lemma4 : ConLn L3 L4.
Proof.
unfold L4 at 1 in |- *.
apply cong_par_con with (m := L1).

*****

*****

+++++
Qed.
-----
Hint Resolve lemma4.
-----
Let D : Point := pt (Twol L3 L4 lemma4).
-----
Let lemma5 : Apart B L3.
-----
Let lemma5 : Apart B L3.

*****
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
Proof.
-----
Let lemma5 : Apart B L3.
Proof.

*****
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
lapply (constructive_uniqueness_for_parallels Base L3 B).
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).

*****
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3), Apart B L3
+++++
intro H'2.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.

*****
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
elim H'2.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.

*****
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : or (Apart B Base) (Apart B L3), Apart B L3
+++++
intro H'3.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.

*****
H'3 : or (Apart B Base) (Apart B L3)
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
elim H'3.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.

*****
H'3 : or (Apart B Base) (Apart B L3)
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart B Base, Apart B L3
+++++
intro H'4.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.

*****
H'4 : Apart B Base
H'3 : or (Apart B Base) (Apart B L3)
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
clear H'3 H'2.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.
clear H'3 H'2.

*****
H'4 : Apart B Base
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
auto.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.
clear H'3 H'2.
auto.

*****
H'4 : Apart B Base
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
unfold B in H'4.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.
clear H'3 H'2.
auto.
unfold B in H'4.

*****
H'4 : Apart (extremity (base t)) Base
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
unfold Base in H'4.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.
clear H'3 H'2.
auto.
unfold B in H'4.
unfold Base in H'4.

*****
H'4 : Apart (extremity (base t)) (ln (base t))
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
elim (inc_ln2 (base t)).
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.
intro H'4.
clear H'3 H'2.
auto.
unfold B in H'4.
unfold Base in H'4.
elim (inc_ln2 (base t)).

*****
H'4 : Apart (extremity (base t)) (ln (base t))
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart (extremity (base t)) (ln (base t))
+++++
auto.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
elim H'3.

*****
H'3 : or (Apart B Base) (Apart B L3)
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart B L3, Apart B L3
+++++
trivial.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.

*****
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : ConLn Base L3, Apart B L3
+++++
intro H'3.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.

*****
H'3 : ConLn Base L3
H'2 : or (or (Apart B Base) (Apart B L3)) (ConLn Base L3)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
clear H'2.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
clear H'2.

*****
H'3 : ConLn Base L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
auto.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
clear H'2.
auto.

*****
H'3 : ConLn Base L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
unfold L3 in H'3.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
clear H'2.
auto.
unfold L3 in H'3.

*****
H'3 : ConLn Base (par Base C)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart B L3
+++++
elim (Ax1_i Base C).
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
intro H'2.
elim H'2.
intro H'3.
clear H'2.
auto.
unfold L3 in H'3.
elim (Ax1_i Base C).

*****
H'3 : ConLn Base (par Base C)
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn (par Base C) Base
+++++
auto.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).

*****
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn Base L3
+++++
idtac.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).
idtac.

*****
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn Base L3
+++++
auto.
-----
Let lemma5 : Apart B L3.
Proof.
lapply (constructive_uniqueness_for_parallels Base L3 B).

*****

*****

+++++
Qed.
-----
Hint Resolve lemma5.
-----
Let lemma6 : Apart C L4.
-----
Let lemma6 : Apart C L4.

*****
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
Proof.
-----
Let lemma6 : Apart C L4.
Proof.

*****
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
lapply (constructive_uniqueness_for_parallels L1 L4 C).
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).

*****
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4), Apart C L4
+++++
intro H'4.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.

*****
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
elim H'4.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.

*****
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : or (Apart C L1) (Apart C L4), Apart C L4
+++++
intro H'5.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.

*****
H'5 : or (Apart C L1) (Apart C L4)
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
elim H'5.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.

*****
H'5 : or (Apart C L1) (Apart C L4)
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart C L1, Apart C L4
+++++
intro H'6.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.

*****
H'6 : Apart C L1
H'5 : or (Apart C L1) (Apart C L4)
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
clear H'5 H'4.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.

*****
H'6 : Apart C L1
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
auto.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.

*****
H'6 : Apart C L1
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
unfold C in H'6.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.

*****
H'6 : Apart (summit t) L1
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
unfold L1 in H'6.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.
unfold L1 in H'6.

*****
H'6 : Apart (summit t) (ln (Side1 t))
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
generalize H'6.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.
unfold L1 in H'6.
generalize H'6.

*****
H'6 : Apart (summit t) (ln (Side1 t))
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart (summit t) (ln (Side1 t)), Apart C L4
+++++
rewrite (auxs3 t).
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.
unfold L1 in H'6.
generalize H'6.
rewrite (auxs3 t).

*****
H'6 : Apart (summit t) (ln (Side1 t))
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart (origin (Side1 t)) (ln (Side1 t)), Apart C L4
+++++
intro H'.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.
unfold L1 in H'6.
generalize H'6.
rewrite (auxs3 t).
intro H'.

*****
H' : Apart (origin (Side1 t)) (ln (Side1 t))
H'6 : Apart (summit t) (ln (Side1 t))
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
elim (inc_ln1 (Side1 t)).
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.
intro H'6.
clear H'5 H'4.
auto.
unfold C in H'6.
unfold L1 in H'6.
generalize H'6.
rewrite (auxs3 t).
intro H'.
elim (inc_ln1 (Side1 t)).

*****
H' : Apart (origin (Side1 t)) (ln (Side1 t))
H'6 : Apart (summit t) (ln (Side1 t))
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart (origin (Side1 t)) (ln (Side1 t))
+++++
auto.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
elim H'5.

*****
H'5 : or (Apart C L1) (Apart C L4)
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : Apart C L4, Apart C L4
+++++
trivial.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.

*****
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
forall _ : ConLn L1 L4, Apart C L4
+++++
intro H'5.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.

*****
H'5 : ConLn L1 L4
H'4 : or (or (Apart C L1) (Apart C L4)) (ConLn L1 L4)
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
clear H'4.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
clear H'4.

*****
H'5 : ConLn L1 L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
auto.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
clear H'4.
auto.

*****
H'5 : ConLn L1 L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Apart C L4
+++++
elim (Ax1_i L1 B).
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
intro H'4.
elim H'4.
intro H'5.
clear H'4.
auto.
elim (Ax1_i L1 B).

*****
H'5 : ConLn L1 L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
ConLn (par L1 B) L1
+++++
auto.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).

*****
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn L1 L4
+++++
idtac.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).
idtac.

*****
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiLn L1 L4
+++++
auto.
-----
Let lemma6 : Apart C L4.
Proof.
lapply (constructive_uniqueness_for_parallels L1 L4 C).

*****

*****

+++++
Qed.
-----
Hint Resolve lemma6.
-----
Let lemma7 : DiPt C D.
-----
Let lemma7 : DiPt C D.

*****
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt C D
+++++
Proof.
-----
Let lemma7 : DiPt C D.
Proof.

*****
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt C D
+++++
unfold D in |- *.
-----
Let lemma7 : DiPt C D.
Proof.
unfold D in |- *.

*****
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt C (pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |})
+++++
auto.
-----
Let lemma7 : DiPt C D.
Proof.
unfold D in |- *.
auto.

*****

*****

+++++
Qed.
-----
Let lemma8 : DiPt B D.
-----
Let lemma8 : DiPt B D.

*****
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt B D
+++++
Proof.
-----
Let lemma8 : DiPt B D.
Proof.

*****
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt B D
+++++
unfold D in |- *.
-----
Let lemma8 : DiPt B D.
Proof.
unfold D in |- *.

*****
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
DiPt B (pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |})
+++++
auto.
-----
Let lemma8 : DiPt B D.
Proof.
unfold D in |- *.
auto.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma7 lemma8.
-----
Let S1 : Segment := base t.
-----
Let S3 : Segment := reverse (Side1 t).
-----
Let S2 : Segment := Seg C D lemma7.
-----
Let S4 : Segment := Seg B D lemma8.
-----
Let lemma9 : EqLn L1 (ln (reverse (Side1 t))).
-----
Let lemma9 : EqLn L1 (ln (reverse (Side1 t))).

*****
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L1 (ln (reverse (Side1 t)))
+++++
Proof.
-----
Let lemma9 : EqLn L1 (ln (reverse (Side1 t))).
Proof.

*****
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L1 (ln (reverse (Side1 t)))
+++++
unfold L1 at 1 in |- *.
-----
Let lemma9 : EqLn L1 (ln (reverse (Side1 t))).
Proof.
unfold L1 at 1 in |- *.

*****
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn (ln (Side1 t)) (ln (reverse (Side1 t)))
+++++
auto.
-----
Let lemma9 : EqLn L1 (ln (reverse (Side1 t))).
Proof.
unfold L1 at 1 in |- *.
auto.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma9.
-----
Let lemma10 : EqLn L3 (ln S2).
-----
Let lemma10 : EqLn L3 (ln S2).

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L3 (ln S2)
+++++
Proof.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L3 (ln S2)
+++++
apply Uniqueness_of_constructed_lines.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin S2) L3
+++++
unfold S2 in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S2 in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}) L3
+++++
unfold L1 in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S2 in |- *.
unfold L1 in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}) L3
+++++
unfold L3 in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S2 in |- *.
unfold L1 in |- *.
unfold L3 in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}) (par Base C)
+++++
simpl in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S2 in |- *.
unfold L1 in |- *.
unfold L3 in |- *.
simpl in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident C (par Base C)
+++++
auto.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity S2) L3
+++++
unfold L3 in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold L3 in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity S2) (par Base C)
+++++
unfold S2 in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold L3 in |- *.
unfold S2 in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity {| origin := C; extremity := D; Seg_cond := lemma7 |}) (par Base C)
+++++
unfold D in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold L3 in |- *.
unfold S2 in |- *.
unfold D in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity {| origin := C; extremity := pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |}; Seg_cond := lemma7 |}) (par Base C)
+++++
simpl in |- *.
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.
unfold L3 in |- *.
unfold S2 in |- *.
unfold D in |- *.
simpl in |- *.

*****
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |}) (par Base C)
+++++
exact (inc_pt1 (Twol L3 L4 lemma4)).
-----
Let lemma10 : EqLn L3 (ln S2).
Proof.
apply Uniqueness_of_constructed_lines.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma10.
-----
Let lemma11 : EqLn L4 (ln S4).
-----
Let lemma11 : EqLn L4 (ln S4).

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L4 (ln S4)
+++++
Proof.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L4 (ln S4)
+++++
apply Uniqueness_of_constructed_lines.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin S4) L4
+++++
unfold S4 in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin {| origin := B; extremity := D; Seg_cond := lemma8 |}) L4
+++++
unfold L4 in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.
unfold L4 in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (origin {| origin := B; extremity := D; Seg_cond := lemma8 |}) (par L1 B)
+++++
simpl in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.
unfold L4 in |- *.
simpl in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident B (par L1 B)
+++++
auto.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity S4) L4
+++++
unfold S4 in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity {| origin := B; extremity := D; Seg_cond := lemma8 |}) L4
+++++
unfold D in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.
unfold D in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (extremity {| origin := B; extremity := pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |}; Seg_cond := lemma8 |}) L4
+++++
simpl in |- *.
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.
unfold S4 in |- *.
unfold D in |- *.
simpl in |- *.

*****
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Incident (pt {| line1 := L3; line2 := L4; Twol_cond := lemma4 |}) L4
+++++
exact (inc_pt2 (Twol L3 L4 lemma4)).
-----
Let lemma11 : EqLn L4 (ln S4).
Proof.
apply Uniqueness_of_constructed_lines.

*****

*****

+++++
Qed.
-----
Hint Resolve lemma11.
-----
Theorem thm9_2 : Parallelogram.
-----
Theorem thm9_2 : Parallelogram.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Parallelogram
+++++
Proof.
-----
Theorem thm9_2 : Parallelogram.
Proof.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
Parallelogram
+++++
apply (Pgram S1 S2 S3 S4).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S3) (origin S1)) (eq (extremity S3) (origin S2))
+++++
unfold S1 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S3) (origin (base t))) (eq (extremity S3) (origin S2))
+++++
unfold S2 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S3) (origin (base t))) (eq (extremity S3) (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
unfold S3 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (reverse (Side1 t))) (origin (base t))) (eq (extremity (reverse (Side1 t))) (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
rewrite <- (ext_rev (Side1 t)).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (extremity (Side1 t)) (origin (base t))) (eq (extremity (reverse (Side1 t))) (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
rewrite <- (auxs1 t).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).
rewrite <- (auxs1 t).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (base t)) (origin (base t))) (eq (extremity (reverse (Side1 t))) (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
rewrite <- (orig_rev (Side1 t)).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).
rewrite <- (auxs1 t).
rewrite <- (orig_rev (Side1 t)).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (base t)) (origin (base t))) (eq (origin (Side1 t)) (origin {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
simpl in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).
rewrite <- (auxs1 t).
rewrite <- (orig_rev (Side1 t)).
simpl in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (base t)) (origin (base t))) (eq (origin (Side1 t)) C)
+++++
rewrite <- (auxs3 t).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).
rewrite <- (auxs1 t).
rewrite <- (orig_rev (Side1 t)).
simpl in |- *.
rewrite <- (auxs3 t).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (base t)) (origin (base t))) (eq (summit t) C)
+++++
unfold C in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S3 in |- *.
rewrite <- (ext_rev (Side1 t)).
rewrite <- (auxs1 t).
rewrite <- (orig_rev (Side1 t)).
simpl in |- *.
rewrite <- (auxs3 t).
unfold C in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin (base t)) (origin (base t))) (eq (summit t) (summit t))
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S4) (extremity S1)) (eq (extremity S4) (extremity S2))
+++++
unfold S1 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S4) (extremity (base t))) (eq (extremity S4) (extremity S2))
+++++
unfold S2 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin S4) (extremity (base t))) (eq (extremity S4) (extremity {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
unfold S4 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S4 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin {| origin := B; extremity := D; Seg_cond := lemma8 |}) (extremity (base t))) (eq (extremity {| origin := B; extremity := D; Seg_cond := lemma8 |}) (extremity {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
unfold B in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S4 in |- *.
unfold B in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (origin {| origin := extremity (base t); extremity := D; Seg_cond := lemma8 |}) (extremity (base t))) (eq (extremity {| origin := extremity (base t); extremity := D; Seg_cond := lemma8 |}) (extremity {| origin := C; extremity := D; Seg_cond := lemma7 |}))
+++++
simpl in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
unfold S1 in |- *.
unfold S2 in |- *.
unfold S4 in |- *.
unfold B in |- *.
simpl in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
and (eq (extremity (base t)) (extremity (base t))) (eq D D)
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S1) (ln S2)
+++++
apply cong_eqln_spar with (m := L3).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S1) L3
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).
auto.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S1) L3
+++++
unfold L3 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).
auto.
unfold L3 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S1) (par Base C)
+++++
unfold S1 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).
auto.
unfold L3 in |- *.
unfold S1 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln (base t)) (par Base C)
+++++
unfold Base in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).
auto.
unfold L3 in |- *.
unfold S1 in |- *.
unfold Base in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln (base t)) (par (ln (base t)) C)
+++++
unfold C in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).
auto.
unfold L3 in |- *.
unfold S1 in |- *.
unfold Base in |- *.
unfold C in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln (base t)) (par (ln (base t)) (summit t))
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L3).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L3 (ln S2)
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S3) (ln S4)
+++++
apply cong_eqln_spar with (m := L4).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S3) L4
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).
auto.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S3) L4
+++++
unfold L4 in |- *.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).
auto.
unfold L4 in |- *.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (ln S3) (par L1 B)
+++++
apply sym_SPar.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).
auto.
unfold L4 in |- *.
apply sym_SPar.

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (par L1 B) (ln S3)
+++++
apply cong_eqln_spar with (m := L1).
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).
auto.
unfold L4 in |- *.
apply sym_SPar.
apply cong_eqln_spar with (m := L1).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
SPar (par L1 B) L1
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).
auto.
unfold L4 in |- *.
apply sym_SPar.
apply cong_eqln_spar with (m := L1).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L1 (ln S3)
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).
apply cong_eqln_spar with (m := L4).

*****
lemma11 : EqLn L4 (ln S4)
lemma10 : EqLn L3 (ln S2)
lemma9 : EqLn L1 (ln (reverse (Side1 t)))
S4 : Segment
S2 : Segment
S3 : Segment
S1 : Segment
lemma8 : DiPt B D
lemma7 : DiPt C D
lemma6 : Apart C L4
lemma5 : Apart B L3
D : Point
lemma4 : ConLn L3 L4
lemma3 : ConLn L1 L3
lemma2' : DiLn L1 L4
lemma5' : Apart B L1
lemma2 : DiLn Base L3
lemma1 : ConLn Base L1
L4 : Line
L3 : Line
L2 : Line
L1 : Line
Base : Line
B : Point
A : Point
C : Point
t : Triangle
*****
EqLn L4 (ln S4)
+++++
auto.
-----
Theorem thm9_2 : Parallelogram.
Proof.
apply (Pgram S1 S2 S3 S4).

*****

*****

+++++
Qed.
-----
End construction9_2.
-----
